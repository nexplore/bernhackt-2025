@page "/weather"
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.Extensions.AI
@using Microsoft.SemanticKernel.ChatCompletion
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject WeatherApiClient WeatherApi
@inject IChatClient ChatClient

<PageTitle>Weather</PageTitle>

<MudStack>
    <h1>Weather</h1>

    <p>This component demonstrates showing data loaded from a backend API service.</p>

    @if (forecasts == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <MudSimpleTable>
            <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
            </tbody>
        </MudSimpleTable>
        <MudChat>
            <MudChatBubble Class="whitespace-pre-line">
                @if (string.IsNullOrEmpty(responseText))
                {
                    <MudSkeleton ></MudSkeleton>
                }
                else {
                    @responseText
                }
            </MudChatBubble>
        </MudChat>
    }
</MudStack>

@code {
    private WeatherForecast[]? forecasts;

    private string responseText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherApi.GetWeatherAsync();

        StateHasChanged();

        var input = $"What's your feeling about the weather forecast: {JsonSerializer.Serialize(forecasts)}?";

        await foreach (var response in ChatClient.GetStreamingResponseAsync(new ChatMessage(ChatRole.User, input)))
        {
            responseText += response.Text;
            StateHasChanged();
        }
    }

}